'use strict';

angular.module('give-website').controller('AppController', [
	'$rootScope', 'Utils', 'localStorageService', '$state', '$window', '$interval', '$timeout', 'modalService',
	function ( $rootScope, Utils, localStorageService, $state, $window, $interval, $timeout, modalService ) {

		// Global widget flags
		$rootScope.is_loading = true;

		// Global alerts
		$rootScope.alerts = {};
		$rootScope.alert_counter = 0;
		$rootScope.timer = null;

		// Make the global OAD namespace available to angular scopes
		$rootScope.OAD = OAD;

		// Non-auth routes

		// Add new alert
		self.addAlert = $rootScope.addAlert = function ( type, msg, is_sticky ) {
			if ( ['error', 'info', 'danger', 'success', 'warning'].indexOf(type) > -1 ) {
				$rootScope.alerts[++$rootScope.alert_counter] = {
					type: (type == 'error' ? 'danger' : type),
					msg : (msg || ''),
					sticky: !!is_sticky,
					ts: !is_sticky ? new Date().getTime() : null
				}
			}
			$timeout(function(){
				Utils.scrollViewportToTop(1);
			}, 150);
		};

		// Delete alert
		$rootScope.deleteAlert = function(index){
			if ($rootScope.alerts[index]){
				delete $rootScope.alerts[index];
				$rootScope.alert_counter--;
			}
		};

		// Alert events
		$rootScope.$on('system.alert', function(alert){
			$rootScope.addAlert(alert.type, alert.message, alert.is_sticky);
		});

		// Window resize event handler - emit a custom event and send in the viewport dimensions
		$rootScope.windowResizeEvent = _.debounce(function(e){

			// Issue an internal event for controllers to watch
			$rootScope.$broadcast('app.window.resize', {
				viewport: {
					height: window.innerHeight, width: window.innerWidth
				}
			});

			// Apply scope
			//$rootScope.$apply();

		}, 250);

		// Cleanup alerts
		$rootScope.cleanUpAlerts = function(){
			$('.notifications__alert[data-sticky!="true"]').each(function(){
				var ts = parseInt(this.getAttribute('data-ts'));
				var now = new Date().getTime();
				if ( ( (now - ts) / 1000 ) > OAD.ALERT_VISIBILITY_PERIOD_SECS){
					$rootScope.deleteAlert(this.getAttribute('data-index'));
				}
			});
		};

		// Disable alerts
		self.disableAlertCleanup = $rootScope.disableAlertCleanup = function(){
			$interval.cancel($rootScope.timer);
		};

		// Show a todo dialog
		$rootScope.showTodo = function(){
			var modalInstance = modalService.show(
				{
					templateUrl: 'views/widgets/ui-widget.modal.html'
				},
				{
					title  : 'Under construction',
					content: 'Please bear with us while we work hard at releasing this functionality!',
					buttons: [
						{
							label     : 'Ok',
							is_primary: true,
							is_cancel : true,
							click     : function () {}
						}
					]
				}
			);
		};

		/*
		 Controller initialisation
		 */
		$rootScope.$on('controller.init', function($event, theController){

			// Hide the app loader
			$('body').removeAttr('data-loading');
			$rootScope.is_loading = false;

			// For UI directives in need of notification when the controller has finalised
			// trigger an application window resize event
			$rootScope.windowResizeEvent($event);

			// Done
			console.log('[INIT] State Initialised "' + theController.name + '"');
			OAD.outputLine();

		});

		/*
		 Global application initialisation
		 */
		$rootScope.onInit = function() {

			// Check if localstorage needs clearing
			var stored_version = localStorageService.get(OAD.CookieNames.Version);
			if (!stored_version || !OAD.VERSION  || (OAD.VERSION != stored_version)){

				// Yep - wipe LS
				localStorageService.clearAll();
				console.log('Version ' + OAD.VERSION + ' found, localStorage data reset.');

				// Store new version
				localStorageService.set(OAD.CookieNames.Version, OAD.VERSION);

			}

			// Setup a global resize handler so that all and sundry can use a single, debounced window resize event
			angular.element($window).bind('resize', $rootScope.windowResizeEvent);
			$rootScope.$on('$stateChangeSuccess', $rootScope.windowResizeEvent);

			// Initialise the alert cleanup timer
			$rootScope.timer = $interval(
				$rootScope.cleanUpAlerts,
				OAD.ALERT_VISIBILITY_CHECKER_INTERVAL_SECS * 1000
			);

			// Done
			console.log('[INIT] App Initialised.');
			OAD.outputLine();

		}(); // Init appController

	}]);

'use strict';

angular.module('give-website')

	.controller('HomeController', [
		'$scope',
		function ( $scope ) {

			/*
			 Controller methods
			 */

			/*
			 Controller initialisations
			 */
			$scope.init = function () {

				// Tell the app scope we've loaded
				$scope.$emit('controller.init', {
					name: 'Home', scope: $scope
				});

			};

			/*
				Video event handlers
			 */
			$scope.$on('youtube.player.ready', function () {

			});
			$scope.$on('youtube.player.playing', function () {

			});
			$scope.$on('youtube.player.paused', function () {

			});

			// Init this controller
			$scope.init();

		}]
)

;
'use strict';

angular.module('give-website')

	.controller('RegisterController', [
		'$scope',
		function ( $scope ) {

			$scope.register_showing = false;
			$scope.user = {
				name: '',
				email: ''
			};
			$scope.backupUser = angular.copy($scope.user);
			$scope.is_saving = false;

			/*
			 Controller methods
			 */

			// Register user
			$scope.registerUser = function(){

				// Dim / disable the form
				$scope.is_saving = true;

				$scope.showTodo();
				$scope.RegisterForm.$setPristine();
				$scope.user = {
					name: '',
					email: ''
				};
				$scope.is_saving = false;
				$scope.register_showing = false;
				return;

				var _whenDone = function(){
					$scope.RegisterForm.$setPristine();
					$scope.user = {
						name: '',
						email: ''
					};
					$scope.addAlert('info', 'Registration is successful, please check your email for confirmation!');
					$scope.is_saving = false;
					$scope.register_showing = false;
				};

			};

			/*
			 Controller initialisations
			 */
			$scope.init = function () {

				// Tell the app scope we've loaded
				$scope.$emit('controller.init', {
					name: 'Register', scope: $scope
				});

			};

			// Init this controller
			$scope.init();

		}]
)

;
'use strict';

/*

    TitleCase Filter

 */
angular.module('give-website')

	.filter('titlecase', function() {
		return function(str) {
			if ((str || '').length > 0){
				return str.replace(/\w\S*/g, function ( txt ) {return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
			} else {
				return '';
			}

		};
	})

;
angular.module('give-website')
	.service('modalService', [
		'$uibModal',
		function ( $uibModal ) {

			var modalDefaults = {
				backdrop   : 'static',
				keyboard   : true,
				modalFade  : true,
				templateUrl: 'views/widgets/ui-widget.modal.html'
			};

			var modalOptions = {
				title           : 'Proceed?',
				content         : 'Perform this action?',
				buttons         : [
					{
						label: 'OK',
						is_primary: true,
						is_cancel: false
					}
				]
			};

			this.show = function ( customModalDefaults, customModalOptions ) {

				var localModalOptions = {}, localModalDefaults = {};

				// Map angular-ui modal custom defaults to modal defaults defined in service
				angular.extend(localModalDefaults, modalDefaults, customModalDefaults);

				// Map modal.html $scope custom properties to defaults defined in service
				angular.extend(localModalOptions, modalOptions, customModalOptions);

				// The default modal controller
				if (!localModalDefaults.controller) {
					function localModalDefaultsCtrl($scope, $uibModalInstance) {

						$scope.modalOptions = localModalOptions;
						$scope.Math = Math;

						for (var i = 0; i < $scope.modalOptions.buttons.length; i++){

							var btn = $scope.modalOptions.buttons[i];
							btn.handler = function(result){

								// Custom handler?
								if (this.click){ this.click(); }

								// Close appropriately
								if (this.is_cancel){
									$uibModalInstance.dismiss('cancel');
								} else {
									$uibModalInstance.close(result);
								}

							};

							$scope.modalOptions.buttons[i] = btn;
						}

					}
					localModalDefaults.controller = localModalDefaultsCtrl;
					localModalDefaultsCtrl.$inject = ['$scope', '$uibModalInstance'];
				}

				return $uibModal.open(localModalDefaults); //.result;

			};

		}
	]);
'use strict';

/*

    Utility service

 */
angular.module('give-website')
	.factory('Utils', function () {
		return {

			// Strip leading whitespace from initial value, this is similar to
			// rails' strip_heredoc function, it uses the first line with content
			// as the leading whitespace baseline
			normalizeWhitespace: function ( str ) {

				// Strip an initial blank whitespace caused from having text nested inside an html tag
				var string = str.replace(/^\n/, '');

				// Find the first text with an indent and get the length of the indent
				var firstIndentLength = new RegExp("(?:^|\n)([ \t\r]+)").exec(string)[1].length

				// Use the first indent length as a baseline and normalize all other lines
				return string.replace(new RegExp("(^|\n)[ \t\r]{" + firstIndentLength + "}", 'g'), "$1")

			},

			// Remove text nodes from an HTMLCollection
			removeTextNodes: function(node_list){
				if(node_list) {
					for (var i = 0; i < node_list.length; i++){
						if (node_list[i].nodeName.toLowerCase() == '#text'){
							node_list.splice(i, 1);
						}
					}
				}
				return node_list;
			},

			// Titlecase
			toTitleCase: function ( str ) {
				return str.replace(/\w\S*/g, function ( txt ) {return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
			},

			// UCWords
			ucWords: function(str){
				return (str + '').replace(/^([a-z])|\s+([a-z])/g, function ($1) {
					return $1.toUpperCase();
				});
			},

			// Get an array of select list items (multiselect)
			getMultiSelectArray: function ($node) {
				var _list = new Array();
				if ($node && ($.isArray($node.val()) && ($node.val().length > 0))) {
					var _tmp = $node.val();
					for (var i = 0; i < _tmp.length; i++){
						if (_tmp[i].length > 0) {
							_list.push(_tmp[i]);
						}
					}
				}
				return _list;
			},

			getSetNodeId: function ( node ) {
				var $node = $(node),
				    _id = false;
				if ( $node.length > 0 ) {
					_id = $node.attr('id');
					if ( !_id || (_id.length == 0) ) {
						_id = '_' + new Date().getTime() + '_' + Math.floor(Math.random() * 101);
						$node.attr('id', _id);
					}
				}
				return _id;
			},

			getQStudioDate: function ( QTypeDate ) {
				var year = Math.floor(QTypeDate);
                var time = new moment(0).year(year);
                return time.add((new moment(0).year(year + 1) - time) * (QTypeDate - year), 'milliseconds');
			},

			// Generate a code-safe mchine name from a text string
			makeMachineName: function(str){
				if (str && str.length > 0){

					// Remove all non-safe chars
					var ret = str.replace(/[^a-zA-Z0-9_ ]/g, '');

					// All spaces with underscores
					ret = ret.replace(/\s+/g, '_');

					return ret.toLowerCase();

				} else {
					return '';
				}
			},

			// Create a friednly name from a machine_name
			makeFriendlyName: function(str){
				if (str && str.length > 0){

					// Replace underscores with spaces
					var ret = str.replace(/[_-]/g, ' ');

					// UCWords whats left
					return this.ucWords(ret);

				} else {
					return '';
				}
			},

			// Build a past date object based on intervals
			makeHistoricalDate: function(unit, interval, suffix){
				var date = moment().subtract(unit, interval).hours(0).minutes(0).seconds(0);
				return {
					label: date.format('MMMM Do, YYYY') + ' (' + suffix + ')',
					value: unit + '_' + interval
				}
			},

			// Create a random hex colour code
			makeRandomHexColour: function(){
				return Math.floor(Math.random() * 16777215).toString(16);
			},

			// Create a random integer
			makeRandomInt: function(min, max){
				return Math.floor( ( Math.random() * max) + min );
			},

			// Escape HTML string
			escapeHtml: function(str) {
				var div = document.createElement('div');
				div.appendChild(document.createTextNode(str));
				return div.innerHTML;
			},

			// Return a maths average from array of numeric values
			averageFromArray: function(arr){
				return _.reduce(arr, function(memo, num) {
						return memo + num;
					}, 0) / (arr.length === 0 ? 1 : arr.length);
			},

			// Convert from x and y arrays to array of x/y pairs
			flattenCoordinatesArray: function(coords){
				if (angular.isObject(coords)){

					var flat = [];
					for (var idx = 0; idx < coords.x.length; idx++){
						flat.push( [ coords.x[idx], coords.y[idx] ] );
					}
					return flat;

				}
				return false;
			},

			// Scroll a section to bring an element to the top
			scrollToElement: function($container, $element, offset, duration, _onComplete){

				duration = duration || 400;
				offset = offset || $container.offset().top;
				var element_top = ( $element.offset() ? $element.offset().top : 0 );
				var scroll_top = (
					offset === false
						? 0
						: parseInt( ( element_top - offset ) + $container.scrollTop() )
				);

				$container.stop(true).animate({
					scrollTop: scroll_top
				}, duration, _onComplete);

				return this;
			},

			// Scroll the viewport to an element
			scrollViewportToElement: function($element, duration, _onComplete){

				var $container = $('#view-panel');
				var offset = $container.offset().top || 126;
				this.scrollToElement($container, $element, offset, duration, _onComplete);

				return this;
			},

			// Scroll viewport to top
			scrollViewportToTop: function(duration, _onComplete){

				var $container = $('#view-panel');
				$container.stop().animate({
					scrollTop: 0
				}, duration, _onComplete);

				return this;
			}

		};
	}
);

Array.prototype.getIndexBy = function (name, value) {
	for (var i = 0; i < this.length; i++) {
		if (this[i][name] == value) {
			return i;
		}
	}
};

Number.prototype.toAlwaysFixed = function(d){
	var f = parseFloat(this);
	return isNaN(f) ? this : f.toFixed(d);
};

'use strict';

angular.module('give-website').directive('compile', ['$compile', function ($compile) {
	return function(scope, element, attrs) {
		scope.$watch(
			function(scope) {
				// watch the 'compile' expression for changes
				return scope.$eval(attrs.compile);
			},
			function(value) {
				// when the 'compile' expression changes
				// assign it into the current DOM
				element.html(value);

				// compile the new DOM and link it to the current
				// scope.
				// NOTE: we only compile .childNodes so that
				// we don't get into infinite loop compiling ourselves
				$compile(element.contents())(scope);
			}
		);
	};
}]);
'use strict';

angular.module('give-website').directive('htmlRender', function($compile) {
	return {
		restrict: 'E',
		scope: { html: '@' },
		link: function(scope, element) {
			scope.$watch('html', function(value) {
				if (!value) return;

				var markup = $compile(value)(scope);
				element.append(markup)
			});
		}
	};
});